

apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnect
metadata:
  name: postgres-source-connect-cluster
  namespace: kafka
  annotations:
    strimzi.io/use-connector-resources: "true"  # This annotation enables the use of connector resources
spec:
  version: 3.7.0  # The Kafka Connect version
  replicas: 1  # Number of replicas for the Kafka Connect cluster
  bootstrapServers: my-cluster-kafka-bootstrap:9092  # Kafka bootstrap servers to connect to

  config:
    group.id: connect-cluster  # Group ID for the Connect cluster
    config.storage.replication.factor: 3  # Replication factor for connector configuration storage
    offset.storage.replication.factor: 3  # Replication factor for offset storage (tracks processed records)
    status.storage.replication.factor: 3  # Replication factor for status storage (connector task statuses)
    offset.storage.topic: connect-offsets  # Kafka topic to store connector offsets
    config.storage.topic: connect-configs  # Kafka topic to store connector configuration
    status.storage.topic: connect-status  # Kafka topic to store connector task statuses

  build:
    output:
      type: docker  # Build output type is Docker
      image: nivedsuresh/postgres-source-connect-cluster:latest  # Docker image for the Connect cluster
      pushSecret: dockerhub  # Docker registry secret for pushing the image
    plugins:
      - name: postgres-connector  # Plugin for the PostgreSQL source connector
        artifacts:
          - type: tgz  # Type of artifact (tarball in this case)
            url: https://repo1.maven.org/maven2/io/debezium/debezium-connector-postgres/2.5.1.Final/debezium-connector-postgres-2.5.1.Final-plugin.tar.gz  # URL of the connector plugin
            sha512sum: 0d71db078e1868b0e312b4979e78bef4a01471ea1d7284000423d9e4fddbfde6dd1a30cd0908e75155843d0ac3a5f0a151f40e7ef67e9f2fc57af278b4b65cc8  # SHA-512 checksum for integrity verification

---

apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnector
metadata:
  name: postgres-connector
  namespace: kafka
  labels:
    strimzi.io/cluster: postgres-source-connect-cluster  # Label to link the connector to the KafkaConnect cluster

spec:
  class: io.debezium.connector.postgresql.PostgresConnector  # The connector class for PostgreSQL
  tasksMax: 2  # Maximum number of tasks that can be executed in parallel

  config:
    connector.class: "io.debezium.connector.postgresql.PostgresConnector"  # The class name for the PostgreSQL connector
    database.hostname: "postgres-source"  # The hostname of the PostgreSQL database
    database.port: "5432"  # Port number of the PostgreSQL database
    database.user: "postgres"  # Username for database authentication
    plugin.name: "pgoutput"  # The logical replication plugin for PostgreSQL
    database.password: "12345"  # Password for the PostgreSQL user
    database.dbname: "sourcedb"  # The database to capture changes from
    database.server.name: "postgres"  # Unique name for the logical replication slot
    slot.name: "debezium_slot"  # Name of the logical replication slot
    publication.name: "dbz_publication"  # Name of the publication to capture changes
    table.include.list: "public.*"  # List of tables to include in replication (e.g., all tables in the public schema)
    tombstones.on.delete: "false"  # Do not include tombstone events for deleted records
    transforms: "unwrap"  # Use a transformation to unwrap the Kafka record value
    transforms.unwrap.type: "io.debezium.transforms.ExtractNewRecordState"  # Transformation type to extract the new state of the record
    transforms.unwrap.delete.handling.mode: "rewrite"  # Handle deleted records by rewriting them
    transforms.unwrap.add.fields: "op,source.ts_ms"  # Add additional fields (operation type and timestamp) in the record
    transforms.unwrap.drop.tombstones: "false"  # Do not drop tombstone events (for deletes)
    key.converter: "org.apache.kafka.connect.json.JsonConverter"  # Converter for the key (use JSON format)
    value.converter: "org.apache.kafka.connect.json.JsonConverter"  # Converter for the value (use JSON format)
    topic.prefix: "postgres-cluster"  # Prefix for the Kafka topics generated by the connector

    # Retry configuration
    errors.retry.timeout: 30000  # Timeout for retrying errors (30 seconds)
    errors.retry.delay.max.ms: 10000  # Maximum delay between retries (10 seconds)
    errors.retry.delay.min.ms: 1000  # Minimum delay between retries (1 second)

    # Database history settings
    database.history.kafka.bootstrap.servers: my-cluster-kafka-bootstrap:9092  # Kafka servers for storing database schema history
    database.history.kafka.topic: schema-changes  # Kafka topic for storing schema changes



